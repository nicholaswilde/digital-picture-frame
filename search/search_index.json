{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"FrameFi: Wireless Freedom for Digital Picture Frames","text":"<p>FrameFi transforms a LILYGO T-Dongle S3 into a versatile adapter for any digital picture frame. It enables you to remotely manage your photo library via FTP or access the SD card directly in USB Mass Storage mode.</p> <p>Development Version</p> <p>This project is currently in a <code>v0.X.X</code> development stage. Features and configurations are subject to change, and breaking changes may be introduced at any time.</p>","tags":["frame-fi"]},{"location":"#tldr","title":"TL;DR","text":"<ul> <li>Secrets: Create <code>include/secrets.h</code> and update variables.</li> </ul> <pre><code>cp includes/secrets.h.tmpl includes/secrets.h\n</code></pre> <ul> <li> <p>Computer: Plug in the LILYGO T-Dongle S3 to a computer USB port while holding the button to put it into boot mode.</p> </li> <li> <p>Upload Sketch: Upload the sketch to the dongle.</p> </li> </ul> TaskPlatformIO <pre><code>task upload\n</code></pre> <pre><code>pio run --target upload\n</code></pre> <ul> <li> <p>Reboot the Device: Unplug the dongle from your computer and plug it back in to reboot it.</p> </li> <li> <p>Wi-Fi Credentials: Connect to <code>FrameFi-&lt;MAC&gt;</code> access point and enter Wi-Fi credentials.</p> </li> </ul> <p>Tip</p> <p>If the captive portal does not open automatically, navigate to http://192.168.4.1 in your web browser to configure Wi-Fi.</p> <ul> <li> <p>Digital Picture Frame: Plug in dongle to digital picture frame.</p> </li> <li> <p>Mode Switching: A button or API call switches between FTP and USB Mass Storage modes.</p> </li> </ul> FTP ModeUSB MSC Mode <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <ul> <li>FTP Access: Connect to the device with an FTP client using the IP on the display and credentials from <code>include/secrets.h</code> to upload files.</li> </ul> <p>Log into the device via FTP</p> <pre><code>ftp &lt;HOST&gt;\n</code></pre> <p>Upload pictures to the device</p> <pre><code>put my-picture.png\n</code></pre> <ul> <li>FTP Mode: Upload pictures to the dongle via FTP using <code>lftp</code> or <code>scripts/sync.sh</code>.</li> </ul> <pre><code>lftp -c \"\nset ftp:ssl-allow no;\nopen -u '&lt;FTP_USER&gt;','&lt;FTP_PASSWORD&gt;' '&lt;FTP_HOST&gt;';\nmirror -R --delete --verbose --parallel=1 '&lt;REMOTE_DIR&gt;' '&lt;LOCAL_DIR&gt;';\n\"\n</code></pre> <ul> <li>MQTT: Publish a message to the MQTT broker to turn the display on or off.</li> </ul> <pre><code>mosquitto_pub -h &lt;MQTT_BROKER_IP&gt; -t \"frame-fi/display/set\" -m \"ON\"\n</code></pre>","tags":["frame-fi"]},{"location":"#features","title":"Features","text":"<ul> <li>Dual-Mode Operation: Seamlessly switch between a USB Mass Storage (MSC) device and an FTP server.</li> <li>Web Interface &amp; API: A built-in web server provides an API to check the device's status and switch between modes.</li> <li>Wireless File Management: In FTP mode, you can connect to the device over your Wi-Fi network to add, remove, and manage files on the microSD card.</li> </ul> <p>Warning</p> <p>FTP is an insecure protocol. Only use this feature on a trusted network.</p> <ul> <li>USB Mass Storage Mode: In MSC mode, the device mounts the microSD card as a standard USB thumb drive, allowing for high-speed file transfers directly from your computer.</li> <li>Fast Data Transfer: Utilizes the <code>SD_MMC</code> interface for the microSD card, offering significantly faster read/write speeds compared to the standard SPI interface.</li> <li>Dynamic Wi-Fi Configuration: Uses <code>WiFiManager</code> to create a captive portal for easy Wi-Fi setup without hardcoding credentials.</li> <li>Home Assistant Integration: Publishes status and accepts commands via MQTT for seamless integration with home automation systems.</li> <li>Easy Wi-Fi Reset: Hold the button for 3 seconds to clear saved Wi-Fi credentials and re-enter setup mode.</li> <li>Boot-up Screen: Displays a welcome screen with the current firmware version on startup.</li> <li>LED Status Indicators: A built-in LED provides at-a-glance status updates for different modes.</li> <li>LCD Display: Displays relevant information on the LCD display depending on the mode, including a bar graph showing SD card usage. It also utilizes catppuccin color schemes.</li> </ul>","tags":["frame-fi"]},{"location":"#to-do","title":"To Do","text":"<ul> <li> Use hard-coded Wi-Fi credentials in addition to the captive portal. (#9)</li> </ul>","tags":["frame-fi"]},{"location":"#license","title":"License","text":"<p>Apache License 2.0</p>","tags":["frame-fi"]},{"location":"#author","title":"Author","text":"<p>This project was started in 2025 by Nicholas Wilde.</p>","tags":["frame-fi"]},{"location":"#references","title":"References","text":"<ul> <li>https://docs.frame-fi.sh</li> <li>https://github.com/espressif/arduino-esp32</li> <li>https://github.com/Xinyuan-LilyGO/T-Dongle-S3</li> <li>https://github.com/i-am-shodan/USBArmyKnife</li> </ul>","tags":["frame-fi"]},{"location":"GEMINI/","title":"Markdown Documentation Guidelines for Gemini","text":"<p>Context: This directory contains all project documentation in Markdown format.</p> <p>Specific Instructions for Markdown Files: - Use clear and descriptive headings (H1 for main topic, H2 for sub-sections). - Employ bullet points and numbered lists for readability. - Use backticks (<code>`</code>) for inline code and triple backticks (<code>) for code blocks, specifying the language (e.g.,</code>bash<code>, ```python</code>). - Keep paragraphs concise. - Link to relevant files or sections using relative paths where appropriate. - Ensure a consistent tone and voice (e.g., formal, informal, instructional). - Favor simple Markdown over complex HTML embeds unless absolutely necessary. - All documentation is written in Markdown and generated using the MkDocs with the Material theme. - Adhere strictly to the MkDocs-Material syntax extensions for features like admonitions, content tabs, and icons. - Ensure all new pages are added to the <code>nav</code> section of the <code>mkdocs.yml</code> file to appear in the site navigation. - All internal links must be relative and point to other <code>.md</code> files within the <code>docs/</code> directory. - Do not use first-person nor third-person perspective in the document.</p>"},{"location":"GEMINI/#markdown-style-guide","title":"Markdown Style Guide:","text":"<ul> <li>Headings: Use ATX-style headings (<code>#</code>, <code>##</code>, <code>###</code>, etc.). The main page title is always H1 (<code>#</code>).</li> <li>All Headings should start with emoji using mkdocs-material compatible shortcode.</li> <li>Admonitions: Use admonitions to highlight important information.</li> <li><code>!!! note</code> for general information.</li> <li><code>!!! code</code> for computer code and commands.</li> <li><code>!!! abstract</code> for referencing files.</li> <li><code>??? abstract</code> for long files that need to be collapsed.</li> <li><code>!!! tip</code> for helpful advice.</li> <li><code>!!! warning</code> for critical warnings or potential issues.</li> <li><code>!!! danger</code> for severe risks.</li> <li>Code Blocks: Always specify the language for syntax highlighting (e.g., <code>```python</code>). For shell commands, use <code>shell</code> or <code>bash</code>. Use <code>ini</code> for <code>.env</code> files.</li> <li>Lists: Use hyphens (<code>-</code>) for unordered lists and numbers (<code>1.</code>) for ordered lists.</li> <li>Icons &amp; Emojis: Use Material Design icons and emojis where appropriate to improve visual communication, e.g., <code>:material-check-circle:</code> for success.</li> <li>Icons &amp; Emojis: Use the short codes for emoji instead of the emoji itself.</li> <li>Use 2 spaces for indentation.</li> <li>List items that are links should be inclosed with &lt; and &gt;.</li> <li>Formatting shall be compatible with markdownlint.</li> <li>All hyperlinks should reference a number and the numbers should be at the bottom of the document (e.g. <code>[tool name][1] and</code>1: ` )"},{"location":"GEMINI/#sections","title":"Sections:","text":"<ul> <li>All sections should have emoji in front of the section name.</li> <li>References: Always end a page with a References section.</li> <li>References section starts with the  emoji.</li> <li>References section has a list of relevant links.</li> <li>Config: Create a config section</li> <li>Installation: Create an installation section.</li> <li>This section should show instructions for both amd64 and arm64 architectures.</li> <li>Usage: Create a usage section</li> </ul>"},{"location":"GEMINI/#docsapps","title":"docs/apps/","text":"<ul> <li>This directory contains apps that are installed in my homelab.</li> <li>Instructions should be given for installing the app.</li> </ul>"},{"location":"GEMINI/#docstools","title":"docs/tools/","text":"<ul> <li>This directory contains tools that are used in my homelab.</li> </ul>"},{"location":"GEMINI/#regarding-dependencies","title":"Regarding Dependencies:","text":"<ul> <li>The primary dependency is mkdocs-material.</li> <li>The project also uses the pymdown-extensions for advanced formatting.</li> <li>Mermaid is an acceptable plugin.</li> <li>Do not introduce new MkDocs plugins without prior discussion and approval.</li> </ul>"},{"location":"GEMINI/#example-script-structure","title":"Example Script Structure:","text":"<p>tags:   - relevant-tags</p>"},{"location":"GEMINI/#emoji-name-of-application-or-tool","title":":emoji: Name of application or tool","text":"<p>Description of application or tool. The name of the tool should be a hyperlink to the original source.</p>"},{"location":"GEMINI/#installation","title":"Installation","text":"<p>Instructions on how to install the application or tool.</p> amd64arm64 <pre><code>code to install the application or tool\n</code></pre> <pre><code>code to install the application or tool\n</code></pre>"},{"location":"GEMINI/#config","title":"Config","text":"<p>Instructions on how to configure the application or tool.</p> <p>homelab/path/config/file</p> <pre><code>example of yaml config file\n</code></pre>"},{"location":"GEMINI/#usage","title":"Usage","text":"<p>Instructions on how to use the application or tool.</p>"},{"location":"GEMINI/#upgrade","title":"Upgrade","text":"<p>Code to upgrade the application or tool.</p> TaskManual <pre><code>task update\n</code></pre> <pre><code>command to update application or tool\n</code></pre>"},{"location":"GEMINI/#references","title":"References","text":"<ul> <li> <li>"},{"location":"contributing/","title":"Contributing","text":"<p>First off, thank you for considering contributing to FrameFi. It's people like you that make open source such a great community.</p>","tags":["contributing"]},{"location":"contributing/#reporting-bugs","title":"Reporting Bugs","text":"<p>If you find a bug, please open an issue on our GitHub Issues page.</p> <p>Please include the following in your bug report:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed description of the problem, including steps to reproduce it.</li> <li>The expected behavior and what actually happened.</li> <li>Your hardware setup (e.g., board version, microSD card size).</li> <li>The version of the firmware you are running.</li> </ul>","tags":["contributing"]},{"location":"contributing/#suggesting-enhancements","title":"Suggesting Enhancements","text":"<p>If you have an idea for a new feature or an improvement to an existing one, please open an issue on our GitHub Issues page.</p> <p>Please include the following in your enhancement suggestion:</p> <ul> <li>A clear and descriptive title.</li> <li>A detailed description of the proposed enhancement.</li> <li>Any relevant mockups or examples.</li> </ul>","tags":["contributing"]},{"location":"contributing/#pull-requests","title":"Pull Requests","text":"<p>We welcome pull requests. If you'd like to contribute code, please follow these steps:</p> <ol> <li>Fork the repository.</li> <li>Create a new branch for your feature or bug fix.</li> <li>Make your changes, adhering to the project's coding and documentation standards.</li> <li>Submit a pull request with a clear description of your changes.</li> </ol>","tags":["contributing"]},{"location":"contributing/#code-style","title":"Code Style","text":"<p>This project follows the GEMINI C++ Style Guide. Please ensure your code adheres to these standards.</p> <p>Key points:</p> <ul> <li>Function names must be <code>lowerCamelCase</code>.</li> <li>Every function must have a single-line documentation brief.</li> <li>Implementation comments must use the <code>// --- comment text ---</code> style.</li> </ul>","tags":["contributing"]},{"location":"contributing/#documentation-style","title":"Documentation Style","text":"<p>All documentation is written in Markdown and generated using MkDocs with the Material theme. Please follow the Markdown Documentation Guidelines.</p> <p>Key points:</p> <ul> <li>Use clear and descriptive headings with emojis.</li> <li>Use admonitions to highlight important information.</li> <li>Specify the language for code blocks.</li> <li>Add new pages to the <code>nav</code> section of <code>mkdocs.yml</code>.</li> </ul>","tags":["contributing"]},{"location":"contributing/#versioning","title":"Versioning","text":"<p>The firmware version is automatically generated based on the <code>git</code> history of the repository, so you don't need to set it manually. This ensures that each build is traceable to a specific point in the code's history.</p> <p>The version string is derived using the <code>git describe --tags --dirty --always</code> command. Here's how it works:</p> <ul> <li>Tags: The base version number comes from the most recent <code>git</code> tag (e.g., <code>v1.2.0</code>). It's crucial to tag releases in the format <code>vX.Y.Z</code>.</li> <li>Commit Hash: If you have made commits since the last tag, the version will include the number of commits and the short hash of the latest commit (e.g., <code>v1.2.0-4-g1a2b3c4</code>). This indicates it's a development build.</li> <li>Dirty State: If you have uncommitted changes in your local working directory when you build the firmware, the version string will have a <code>-dirty</code> suffix (e.g., <code>v1.2.0-4-g1a2b3c4-dirty</code>). This is a clear indicator that the build was made from code that doesn't exactly match any commit in the repository, which is useful for debugging.</li> </ul> <p>This automated versioning helps maintain a clear and consistent understanding of what code is running on a device at any given time.</p>","tags":["contributing"]},{"location":"contributing/#license","title":"License","text":"<p>By contributing, you agree that your contributions will be licensed under the Apache License 2.0.</p>","tags":["contributing"]},{"location":"contributing/#references","title":"References","text":"<ul> <li>https://github.com/nicholaswilde/frame-fi/blob/main/LICENSE</li> </ul>","tags":["contributing"]},{"location":"getting-started/","title":"Getting Started","text":"<p>Before building, you need to configure your credentials and format your SD card.</p>","tags":["getting-started"]},{"location":"getting-started/#formatting-the-microsd-card","title":"Formatting the microSD Card","text":"<p>The microSD card must be formatted as FAT32.</p> <p>Warning</p> <p>Formatting the card will erase all of its contents. Back up any important files before proceeding.</p> <ul> <li> <p>Windows:</p> <ol> <li>Insert the microSD card into your computer.</li> <li>Open File Explorer, right-click on the SD card drive, and select Format.</li> <li>Choose FAT32 from the \"File system\" dropdown menu.</li> <li>Click Start.</li> </ol> </li> <li> <p>macOS:</p> <ol> <li>Insert the microSD card.</li> <li>Open Disk Utility.</li> <li>Select the SD card from the list on the left.</li> <li>Click Erase.</li> <li>Choose MS-DOS (FAT) from the \"Format\" dropdown.</li> <li>Click Erase.</li> </ol> </li> <li> <p>Linux:</p> <ol> <li>Insert the microSD card.</li> <li>Open a terminal and run <code>lsblk</code> to identify the device name (e.g., <code>/dev/sdX</code>).</li> <li>Unmount the card if it's auto-mounted: <code>sudo umount /dev/sdX*</code>.</li> <li>Format the card: <code>sudo mkfs.vfat -F 32 /dev/sdX1</code> (assuming the partition is <code>/dev/sdX1</code>).</li> </ol> </li> </ul>","tags":["getting-started"]},{"location":"getting-started/#configure-credentials","title":"Configure Credentials","text":"<ol> <li>Create <code>secrets.h</code>: In the <code>include/</code> directory, create a file named <code>secrets.h</code>.</li> <li>Add Credentials: Copy the contents of <code>include/secrets.h.tmpl</code> into your new <code>secrets.h</code> file and update the values. This file contains the credentials for the Wi-Fi Manager Access Point and the FTP server.</li> </ol> <p>include/secrets.h</p> <pre><code>#pragma once\n\n// --- WiFi Credentials ---\n// Not currently used.\n#define WIFI_SSID \"YourWiFiNetworkName\"\n#define WIFI_PASSWORD \"YourWiFiPassword\"\n\n// --- AP Mode ---\n// #define WIFI_AP_SSID \"AutoConnectAP-FrameFi\"\n// #define WIFI_AP_PASSWORD \"password\"\n\n// --- FTP Mode ---\n#define FTP_USER \"user\"\n#define FTP_PASSWORD \"password\"\n\n// --- MQTT ---\n#define MQTT_CLIENT_ID \"FrameFi\" // Must be unique on the MQTT network\n#define MQTT_HOST \"192.168.1.100\"\n#define MQTT_PORT 1883\n#define MQTT_USER \"user\"\n#define MQTT_PASSWORD \"password\"\n</code></pre> <p>Note</p> <p>This project uses <code>WiFiManager</code> to handle Wi-Fi connections via a captive portal, so you don't need to hardcode your network credentials. The <code>WIFI_SSID</code> and <code>WIFI_PASSWORD</code> fields in <code>secrets.h</code> are placeholders for a potential future feature and are not currently used.</p>","tags":["getting-started"]},{"location":"getting-started/#wi-fi-access-point","title":"Wi-Fi Access Point","text":"<p>When you first boot the device, it will create a Wi-Fi Access Point (AP) that you can connect to from your computer or phone to configure its Wi-Fi connection.</p> <ul> <li>SSID: By default, the AP name is <code>FrameFi-&lt;MAC&gt;</code>, where <code>&lt;MAC&gt;</code> is the last 6 characters of the device's MAC address. This is configured by leaving <code>WIFI_AP_SSID</code> commented out in <code>secrets.h</code>. To set a custom SSID, uncomment <code>WIFI_AP_SSID</code> and provide your own name.</li> <li>Password: By default, the AP is open and does not require a password. To set a password, uncomment <code>WIFI_AP_PASSWORD</code> in <code>secrets.h</code> and provide a password.</li> </ul>","tags":["getting-started"]},{"location":"getting-started/#secrets-management","title":"Secrets Management","text":"<p>This project uses sops for encrypting and decrypting secrets. The following files are encrypted:</p> <ul> <li><code>include/secrets.h</code></li> <li><code>scripts/.env</code></li> </ul> <p>The above files are ignored by git to prevent the accidental comitting of secrets.</p> <p><code>*.enc</code> files are saved encrypted secrets for making it easier to save credentials.</p>","tags":["getting-started"]},{"location":"getting-started/#decrypting-secrets","title":"Decrypting Secrets","text":"<p>To decrypt the files, run the following command:</p> TaskSOPS <pre><code>task decrypt\n</code></pre> <pre><code>sops -d include/secrets.h.enc &gt; include/secrets.h\nsops -d --input-type dotenv --output-type dotenv scripts/.env.enc &gt; scripts/.env\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/#encrypting-secrets","title":"Encrypting Secrets","text":"<p>Note</p> <p>Before encrypting any files, you must add your GPG key's fingerprint or other public key information to the <code>.sops.yaml</code> file at the root of the project. This authorizes you to encrypt and decrypt the files.</p> <p>To encrypt the files after making changes, run the following command:</p> TaskSOPS <pre><code>task encrypt\n</code></pre> <pre><code>sops -e include/secrets.h &gt; include/secrets.h.enc\nsops -e --input-type dotenv --output-type dotenv scripts/.env &gt; scripts/.env.enc\n</code></pre>","tags":["getting-started"]},{"location":"getting-started/#references","title":"References","text":"<ul> <li>https://github.com/catppuccin/catppuccin</li> <li>https://github.com/getsops/sops</li> <li>https://github.com/tzapu/WiFiManager</li> </ul>","tags":["getting-started"]},{"location":"hardware/","title":"Hardware Requirements","text":"<ul> <li>LILYGO T-Dongle S3: This project is specifically designed for this board.</li> <li>microSD Card: A FAT32 formatted microSD card is required to store pictures and files. The sketch has been tested with a 16GB card.</li> <li>Digital Picture Frame: A digital picture frame that can use a USB storage device to serve pictures.</li> </ul>","tags":["hardware"]},{"location":"hardware/#references","title":"References","text":"<ul> <li>https://lilygo.cc/products/t-dongle-s3</li> </ul>","tags":["hardware"]},{"location":"home-assistant/","title":"Home Assistant Integration","text":"<p>This page provides an example of how to integrate FrameFi with Home Assistant using MQTT.</p>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#prerequisites","title":"Prerequisites","text":"<ul> <li>MQTT is enabled and configured on your FrameFi device.</li> <li>You have a running MQTT broker that is accessible by both Home Assistant and your FrameFi.</li> <li>You have the MQTT integration set up in Home Assistant.</li> </ul>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#configuration","title":"Configuration","text":"<p>To enable MQTT, you must first configure the following variables in <code>include/secrets.h</code>.</p> <p>include/secrets.h</p> <pre><code>// --- MQTT ---\n#define MQTT_CLIENT_ID \"FrameFi\" // Must be unique on the MQTT network\n#define MQTT_HOST \"192.168.1.100\"\n#define MQTT_PORT 1883\n#define MQTT_USER \"user\"\n#define MQTT_PASSWORD \"password\"\n</code></pre> <p>Next, add the following configuration to your <code>configuration.yaml</code> file in Home Assistant.</p> <p>configuration.yaml</p> <pre><code>mqtt:\n  - sensor:\n    - name: \"FrameFi Status\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ value_json.mode }}\"\n      icon: \"mdi:image-frame\"\n    - name: \"FrameFi File Count\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ value_json.sd_card.file_count }}\"\n      unit_of_measurement: \"files\"\n      icon: \"mdi:file-multiple\"\n    - name: \"FrameFi Used Space\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ (value_json.sd_card.used_size | float / 1024 / 1024 / 1024) | round(2) }}\"\n      unit_of_measurement: \"GB\"\n      icon: \"mdi:sd\"\n    - name: \"FrameFi Total Space\"\n      state_topic: \"frame-fi/state\"\n      value_template: \"{{ (value_json.sd_card.total_size | float / 1024 / 1024 / 1024) | round(2) }}\"\n      unit_of_measurement: \"GB\"\n      icon: \"mdi:sd\"\n  - switch:\n    - name: \"FrameFi Display\"\n      state_topic: \"frame-fi/display/status\"\n      command_topic: \"frame-fi/display/set\"\n      payload_on: \"ON\"\n      payload_off: \"OFF\"\n      state_on: \"ON\"\n      state_off: \"OFF\"\n      optimistic: false\n      qos: 0\n      retain: true\n      icon: \"mdi:monitor\"\n  - button:\n    - name: \"FrameFi Restart\"\n      command_topic: \"frame-fi/restart\"\n      payload_press: \"RESTART\"\n      icon: \"mdi:restart\"\n  - device_tracker:\n    - name: \"FrameFi\"\n      state_topic: \"frame-fi/status\"\n      availability_topic: \"frame-fi/status\"\n      payload_available: \"online\"\n      payload_not_available: \"offline\"\n      payload_home: \"online\"\n      payload_not_home: \"offline\"\n      source_type: \"router\"\n</code></pre>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#explanation","title":"Explanation","text":"<ul> <li> <p><code>mqtt.sensor</code>:</p> <ul> <li>This creates a new sensor entity in Home Assistant named <code>FrameFi Status</code>.</li> <li>It listens to the <code>frame-fi/state</code> topic and uses a <code>value_template</code> to extract the <code>mode</code> from the JSON payload.</li> <li>The icon is set to <code>mdi:image-frame</code>.</li> </ul> </li> <li> <p><code>mqtt.switch</code>:</p> <ul> <li>This creates a new switch entity named <code>FrameFi Display</code>.</li> <li>It allows you to turn the FrameFi's display on and off from the Home Assistant UI.</li> <li><code>command_topic</code>: When you toggle the switch, it sends either <code>ON</code> or <code>OFF</code> to the <code>frame-fi/display/set</code> topic.</li> <li><code>state_topic</code>: It listens to the <code>frame-fi/display/status</code> topic to get the current state of the display.</li> <li><code>retain: true</code>: This ensures that the last command is retained by the MQTT broker, so the device will pick up the correct state when it reconnects.</li> </ul> </li> <li> <p><code>mqtt.button</code>:</p> <ul> <li>This creates a new button entity named <code>FrameFi Restart</code>.</li> <li>When you press the button, it sends <code>RESTART</code> to the <code>frame-fi/restart</code> topic.</li> </ul> </li> <li> <p><code>mqtt.device_tracker</code>:</p> <ul> <li>This creates a new device tracker entity named <code>FrameFi</code>.</li> <li>It listens to the <code>frame-fi/status</code> topic to determine the device's online/offline status.</li> <li><code>payload_available</code>: When the device publishes <code>online</code> to the <code>frame-fi/status</code> topic, it will be marked as <code>home</code>.</li> <li><code>payload_not_available</code>: When the device publishes <code>offline</code> to the <code>frame-fi/status</code> topic, it will be marked as <code>away</code>.</li> <li><code>source_type: \"router\"</code>: This tells Home Assistant to treat the device as a network-based tracker.</li> </ul> </li> <li> <p>Additional Sensors:</p> <ul> <li>The configuration also adds sensors for <code>File Count</code>, <code>Used Space</code>, and <code>Total Space</code>.</li> <li>These sensors also listen to the <code>frame-fi/state</code> topic and use <code>value_template</code> to extract their respective values from the JSON payload.</li> <li>They are configured with appropriate units (<code>files</code>, <code>GB</code>) and icons.</li> </ul> </li> </ul>","tags":["home-assistant","mqtt"]},{"location":"home-assistant/#references","title":"References","text":"<ul> <li>Home Assistant</li> <li>Home Assistant MQTT Integration</li> </ul>","tags":["home-assistant","mqtt"]},{"location":"software/","title":"Software Dependencies","text":"<p>This project relies on a set of software tools and libraries to ensure proper functionality, development, and documentation. The following sections provide an overview of these dependencies.</p>","tags":["software"]},{"location":"software/#development-tools","title":"Development Tools","text":"<ul> <li>PlatformIO: An open-source ecosystem for IoT development. It provides a command-line interface (CLI) and a VSCode extension for a seamless development experience.</li> <li>Task: A task runner and build tool that automates development and build tasks. See the project's <code>Taskfile.yml</code> for available commands.</li> <li>Docker: Used to create a consistent and reproducible development environment for the documentation server.</li> <li>Renovate: A tool for automated dependency updates, ensuring that the project's dependencies are always up-to-date.</li> <li>SOPS: A tool for managing secrets, allowing for the encryption and decryption of sensitive information.</li> </ul> Task List <pre><code>task: Available tasks for this project:\n* build:                 Build the project\n* clean:                 Clean build files\n* decrypt:               Decrypt secrets\n* encrypt:               Encrypt secrets\n* export:                Export the task list to task-list.txt\n* ftp:                   Switch to FTP mode\n* fullclean:             Perform a full clean of build files\n* get:                   curl -X GET\n* init:                  Init the project\n* list-devices:          List connected serial devices\n* monitor:               Monitor the serial output\n* msc:                   Switch to MSC mode\n* ping:                  Ping the device\n* prune:                 Prune the system\n* reset:                 Reset the Dongle by flashing the default fimrware.\n* restart:               Restart the device\n* serve:                 Start development server on http://0.0.0.0:8000 using Docker and mkdocs-material\n* sync:                  Runs the sync script.\n* update-packages:       Update project dependencies\n* upload:                Upload the firmware\n* uploadm:               Upload the firmware and monitor\n* verbose-build:         Build with verbose output\n</code></pre>","tags":["software"]},{"location":"software/#libraries","title":"Libraries","text":"<ul> <li>knolleary/PubSubClient: A client library for MQTT.</li> <li>mathertel/OneButton: A library for debouncing and simplifying button inputs.</li> <li>fastled/FastLED: A library for controlling a wide range of addressable LEDs.</li> <li>tzapu/WiFiManager: A library for managing Wi-Fi connections on ESP8266 and ESP32 devices.</li> <li>bodmer/TFT_eSPI: A library for driving TFT displays.</li> </ul>","tags":["software"]},{"location":"software/#languages-and-frameworks","title":"Languages and Frameworks","text":"<ul> <li>C++: The primary language used for the firmware development.</li> <li>Python: Used for scripting and automation tasks.</li> <li>Shell Script: Used for various automation and build tasks.</li> <li>MkDocs: A static site generator used for creating the project's documentation.</li> </ul>","tags":["software"]},{"location":"software/#cicd","title":"CI/CD","text":"<ul> <li>GitHub Actions: Used for automating the build, test, and release process.</li> </ul>","tags":["software"]},{"location":"software/#references","title":"References","text":"","tags":["software"]},{"location":"usage/","title":"Usage","text":"<p>The device boots into USB Mass Storage (MSC) mode by default. You can switch between modes by pressing the onboard button or by using the web API.</p>","tags":["usage"]},{"location":"usage/#modes-of-operation","title":"Modes of Operation","text":"<ul> <li> <p>USB Mass Storage Mode (Default):</p> <ol> <li>Plug the T-Dongle-S3 into your computer's USB port.</li> <li>The device will connect to the configured Wi-Fi network. If no credentials are saved, it will go into AP mode.</li> <li>The device will be recognized as a USB Mass Storage device (thumb drive), giving you direct access to the microSD card.</li> </ol> </li> <li> <p>AP Mode:</p> <ol> <li>If the device has no saved Wi-Fi credentials, it will automatically start in AP mode.</li> <li>The device will create a Wi-Fi Access Point named <code>FrameFi-&lt;MAC&gt;</code>.</li> <li>Connect to this AP. If the captive portal does not open automatically, navigate to http://192.168.4.1 in your web browser to configure Wi-Fi.</li> </ol> </li> <li> <p>FTP Server Mode:</p> <ol> <li>Press the onboard button (single click) to switch from MSC to FTP mode or use the web API.</li> <li>Use an FTP client to connect to the device's IP address (visible on the LCD display) using the <code>FTP_USER</code> and <code>FTP_PASSWORD</code> you set in <code>include/secrets.h</code>.</li> </ol> </li> <li> <p>Reset Wi-Fi Settings:</p> <ol> <li>Press and hold the onboard button for at least 3 seconds or use the web API.</li> <li>The device will clear its stored Wi-Fi credentials and restart.</li> <li>Follow the steps for the first-time Wi-Fi setup using the captive portal.</li> </ol> </li> </ul> <p>Insecure Protocol</p> <p>FTP is an inherently insecure protocol that transmits data, including credentials, in plain text. Only use this feature on a trusted, private network.</p>","tags":["usage"]},{"location":"usage/#ftp-access","title":"FTP Access","text":"<p>When the device is in FTP Server Mode, you can access the microSD card over the network using an FTP client.</p> <ol> <li> <p>Switch to FTP Mode:</p> <ul> <li>Press the onboard button (single click) to switch from MSC to FTP mode.</li> <li>Alternatively, use the web API by sending a <code>POST</code> request to <code>/mode/ftp</code>.</li> </ul> </li> <li> <p>Connect with an FTP Client:</p> <ul> <li>Use any standard FTP client (e.g., FileZilla, WinSCP, or the command-line <code>ftp</code>).</li> <li>Host: The IP address of your device (shown on the LCD).</li> <li>Port: <code>21</code> (the default FTP port).</li> <li>Username: The <code>FTP_USER</code> you configured in <code>include/secrets.h</code>.</li> <li>Password: The <code>FTP_PASSWORD</code> you configured in <code>include/secrets.h</code>.</li> </ul> </li> <li> <p>Upload File:</p> <ol> <li> <p>Open the Command Line:</p> <ol> <li>Windows: Open the Command Prompt or PowerShell.</li> <li>macOS or Linux: Open the Terminal application.</li> </ol> </li> <li> <p>Connect to the FTP Server: Type the ftp command followed by the server address:</p> <pre><code>ftp &lt;HOST&gt;\n</code></pre> </li> <li> <p>Enter Your Credentials: The server will prompt you for your username and password from<code>include/secrets.h</code>. Enter them as requested. For security reasons, the password you type may not be displayed on the screen.</p> </li> <li> <p>List Remote Files (Optional): You can list the files on the device by using the <code>ls</code> command:</p> <pre><code>ls\n</code></pre> </li> <li> <p>Navigate to the Local Directory (Optional): If the file you want to upload is not in your current local directory, you can change your local directory using the <code>lcd</code> (local change directory) command:</p> <pre><code>lcd /path/to/data\n</code></pre> </li> <li> <p>Upload a Single File: Use the <code>put</code> command followed by the name of the file you want to upload:</p> <pre><code>put my-picture.png\n</code></pre> </li> </ol> </li> </ol> <p>Using lftp</p> <p>For automated synchronization, the <code>scripts/sync.sh</code> script uses <code>lftp</code> to mirror a local directory to the device. See the Synchronizing Files section for more details.</p>","tags":["usage"]},{"location":"usage/#mqtt-integration","title":"MQTT Integration","text":"<p>The device can connect to an MQTT broker to integrate with home automation platforms like Home Assistant. For a detailed guide, see the Home Assistant Integration page.</p> <ul> <li> <p>Enable MQTT:</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>MQTT_ENABLED</code>: Locate the <code>build_flags</code> section and find the <code>-D MQTT_ENABLED</code> line.</li> <li>Change the Value:</li> </ol> Value Description <code>1</code> Enable MQTT (Default) <code>0</code> Disable MQTT </li> </ul> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D MQTT_ENABLED=1\n</code></pre> <ul> <li> <p>Set MQTT Settings:</p> <ol> <li>Open <code>include/secrets.h</code>.</li> <li>Configure your MQTT broker's IP address, port, and credentials.</li> <li>Rebuild and upload the firmware.</li> </ol> </li> <li> <p>Topics:</p> <ul> <li>Status Topic: <code>frame-fi/status</code> (publishes <code>USB MSC</code> or <code>Application (FTP Server)</code>)</li> <li>Command Topic: <code>frame-fi/display/set</code> (accepts <code>ON</code> or <code>OFF</code> to control the display)</li> </ul> </li> </ul> <p>Warning</p> <p>MQTT is an insecure protocol. Only use this feature on a trusted network.</p>","tags":["usage"]},{"location":"usage/#led-status-indicators","title":"LED Status Indicators","text":"<p>The onboard LED provides visual feedback on the device's status:</p> Color Meaning Initializing on boot Connecting to Wi-Fi or in setup mode USB Mass Storage (MSC) mode active FTP mode active MQTT connected","tags":["usage"]},{"location":"usage/#led-brightness","title":"LED Brightness","text":"<p>You can adjust the brightness of the status LED by modifying the <code>platformio.ini</code> file.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>LED_BRIGHTNESS</code>: Locate the <code>build_flags</code> section and find the <code>-D LED_BRIGHTNESS</code> line. If it doesn't exist, you can add it.</li> <li>Change the Value: Set the value to a number between <code>0</code> (off) and <code>255</code> (maximum brightness).</li> <li>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D LED_BRIGHTNESS=15\n</code></pre> <p>Note</p> <p>If the <code>LED_BRIGHTNESS</code> flag is not defined, the brightness will default to <code>13</code> (approximately 5%).</p>","tags":["usage"]},{"location":"usage/#web-api","title":"Web API","text":"<p>The device hosts a simple web server that allows you to check status and switch modes.</p> <p><code>GET /</code>: Returns the current mode, display status, and SD card information.</p> <pre><code>curl -X GET http://&lt;DEVICE_IP&gt;/\n</code></pre> <p>Example Response</p> <pre><code>{\n  \"mode\": \"USB MSC\",\n  \"display\": {\n    \"status\": \"on\",\n    \"orientation\": 1\n  },\n  \"sd_card\": {\n    \"used_space\": 1234567890,\n    \"total_space\": 9876543210,\n    \"file_count\": 42\n  },\n  \"mqtt\": {\n    \"state\": 0,\n    \"connected\": 1\n  }\n}\n</code></pre> MQTT State State Description State Description <code>-4</code> MQTT_CONNECTION_TIMEOUT <code>1</code> MQTT_CONNECT_BAD_PROTOCOL <code>-3</code> MQTT_CONNECTION_LOST <code>2</code> MQTT_CONNECT_BAD_CLIENT_ID <code>-2</code> MQTT_CONNECT_FAILED <code>3</code> MQTT_CONNECT_UNAVAILABLE <code>-1</code> MQTT_DISCONNECTED <code>4</code> MQTT_CONNECT_BAD_CREDENTIALS <code>0</code> MQTT_CONNECTED <code>5</code> MQTT_CONNECT_UNAUTHORIZED <p><code>POST /mode/msc</code>: Switches the device to USB Mass Storage (MSC) mode.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/msc\n</code></pre> <p>Example Responses</p> Success (200 OK)No Change (200 OK)Error (500 Internal Server Error) <pre><code>{\"status\":\"success\",\"message\":\"Switched to MSC mode.\"}\n</code></pre> <pre><code>{\"status\":\"no_change\",\"message\":\"Already in MSC mode.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Failed to switch to MSC mode.\"}\n</code></pre> <p><code>POST /mode/ftp</code>: Switches the device to FTP mode.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/mode/ftp\n</code></pre> <p>Example Responses</p> Success (200 OK)No Change (200 OK)Error (500 Internal Server Error) <pre><code>{\"status\":\"success\",\"message\":\"Switched to Application (FTP) mode.\"}\n</code></pre> <pre><code>{\"status\":\"no_change\",\"message\":\"Already in Application (FTP) mode.\"}\n</code></pre> <pre><code>{\"status\":\"error\",\"message\":\"Failed to re-initialize SD card.\"}\n</code></pre> <p><code>POST /device/restart</code>: Restarts the device.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/device/restart\n</code></pre> <p>Example Response:</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Restarting device...\"}\n</code></pre> <p><code>POST /display/toggle</code>: Toggles the display on and off.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/toggle\n</code></pre> <p>Example Responses</p> Success (200 OK)Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display toggled on.\"}\n</code></pre> <pre><code>{\"status\":\"success\",\"message\":\"Display toggled off.\"}\n</code></pre> <p><code>POST /display/on</code>: Turns the display on.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/on\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display turned on.\"}\n</code></pre> <p><code>POST /display/off</code>: Turns the display off.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/display/off\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Display turned off.\"}\n</code></pre> <p><code>POST /wifi/reset</code>: Resets the Wi-Fi settings and restarts the device.</p> <pre><code>curl -X POST http://&lt;DEVICE_IP&gt;/wifi/reset\n</code></pre> <p>Example Response</p> Success (200 OK) <pre><code>{\"status\":\"success\",\"message\":\"Resetting Wi-Fi and restarting...\"}\n</code></pre> <p>Device Unreachable After Reset</p> <p>After resetting the Wi-Fi settings, the device will restart and will no longer be connected to your Wi-Fi network. It will become unreachable at its previous IP address. You must reconnect to its Access Point (AP) to configure the new Wi-Fi credentials. See the Modes of Operation section for details on connecting to the AP.</p>","tags":["usage"]},{"location":"usage/#building","title":"Building","text":"<p>This project uses a <code>Taskfile.yml</code> for common development tasks. After installing Task, you can run the following commands.</p> <p>Build the project:</p> TaskPlatformIO <pre><code>task build\n</code></pre> <pre><code>pio run\n</code></pre> <p>Upload the firmware:</p> TaskPlatformIO <pre><code>task upload\n</code></pre> <pre><code>pio run --target upload\n</code></pre> <p>Rebooting the Device</p> <p>After uploading the firmware, you may need to unplug the dongle and plug it back in to reboot it and apply the changes.</p> <p>Monitor the serial output:</p> TaskPlatformIO <pre><code>task monitor\n</code></pre> <pre><code>pio device monitor\n</code></pre> <p>Clean build files:</p> TaskPlatformIO <pre><code>task clean\n</code></pre> <pre><code>pio run --target clean\n</code></pre> <p>List all available tasks:</p> Task <pre><code>task -l\n</code></pre>","tags":["usage"]},{"location":"usage/#flashing-the-firmware","title":"Flashing the Firmware","text":"<p>This guide provides instructions on how to flash the latest firmware to your device. You can use the automated <code>flash.sh</code> script for a streamlined experience, or follow the manual instructions for more control.</p>","tags":["usage"]},{"location":"usage/#automated-flashing-with-flashsh","title":"Automated Flashing with <code>flash.sh</code>","text":"<p>The <code>flash.sh</code> script automates the process of downloading the latest release and flashing it to your device.</p>","tags":["usage"]},{"location":"usage/#prerequisites","title":"Prerequisites","text":"<p>Before you begin, ensure you have the following dependencies installed:</p> <ul> <li><code>curl</code>: For downloading files from the internet.</li> <li><code>grep</code>: For text searching.</li> <li><code>unzip</code>: For extracting zip archives.</li> <li><code>esptool</code>: A tool for communicating with Espressif chips.</li> </ul> <p>You can typically install these using your system's package manager. For <code>esptool</code>, you can install it with pip:</p> <pre><code>pip install esptool\n</code></pre>","tags":["usage"]},{"location":"usage/#usage_1","title":"Usage","text":"<ol> <li> <p>Connect your device: Ensure your ESP32-S3 device is connected to your computer.</p> </li> <li> <p>Run the script: Execute the <code>flash.sh</code> script from the <code>scripts</code> directory or remotely from GitHub.</p> Local Execution (Default Port)Local Execution (Custom Port)Remote Execution (Default Port)Remote Execution (Custom Port) <p>By default, the script uses <code>/dev/ttyACM0</code> as the serial port.</p> <pre><code>./scripts/flash.sh\n</code></pre> <p>If your device is on a different port, you can specify it as an argument.</p> <pre><code>./scripts/flash.sh /dev/ttyUSB0\n</code></pre> <p>You can run the script directly from GitHub without cloning the repository.</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/frame-fi/main/scripts/flash.sh)\"\n</code></pre> <p>To specify a custom port when running remotely, pass it as an argument after the script execution command.</p> <pre><code>bash -c \"$(curl -fsSL https://raw.githubusercontent.com/nicholaswilde/frame-fi/main/scripts/flash.sh)\" _ /dev/ttyUSB0\n</code></pre> </li> </ol> <p>Security Risk</p> <p>Running a script directly from the internet with <code>bash -c \"$(curl...)\"</code> is a potential security risk. Always review the script's source code before executing it to ensure it is safe. You can view the script here.</p> <p>The script will then:</p> <ol> <li>Fetch the latest release from the nicholaswilde/frame-fi repository.</li> <li>Download the release archive to a temporary directory.</li> <li>Extract the necessary <code>.bin</code> files.</li> <li>Flash the firmware to your device using <code>esptool</code>.</li> </ol>","tags":["usage"]},{"location":"usage/#manual-flashing","title":"Manual Flashing","text":"<p>If you don't want to build the project from source, you can flash a pre-compiled release directly to your device.</p> <ul> <li>Download the Latest Release:<ul> <li>Go to the Releases page.</li> <li>Download the zip file from the latest release.</li> <li>Unzip the archive. It will contain <code>firmware.bin</code>, <code>partitions.bin</code>, and <code>bootloader.bin</code>.</li> <li>Optionally, download the <code>boot_app0.bin</code> file from espressive/arduino-esp32.</li> </ul> </li> </ul> <pre><code>wget https://github.com/espressif/arduino-esp32/raw/refs/heads/master/tools/partitions/boot_app0.bin\n</code></pre> <p>Warning</p> <p>The version of <code>boot_app0.bin</code> is critical. Using a version that is incompatible with your ESP32-S3's silicon revision can result in a soft-bricked device that is difficult to recover. The link provided is for the master branch of the <code>arduino-esp32</code> repository and should be compatible with most devices.</p> <ul> <li>Install esptool:     If you have PlatformIO installed, you already have <code>esptool.py</code>. If not, you can install it with pip:</li> </ul> <pre><code>pip install esptool\n</code></pre> <ul> <li>Flash the Device:<ul> <li>Put your T-Dongle-S3 into bootloader mode. You can usually do this by holding down the <code>BOOT</code> button (the one on the side), plugging it into your computer, and then releasing the button.</li> <li>Find the serial port of your device. It will be something like <code>COM3</code> on Windows, <code>/dev/ttyUSB0</code> on Linux, or <code>/dev/cu.serial-XXXX</code> on macOS.</li> <li>Run the following command, replacing <code>&lt;YOUR_SERIAL_PORT&gt;</code> with your device's port:</li> </ul> </li> </ul> Without boot_app0With boot_app0 <pre><code>esptool.py \\\n    --chip esp32s3 \\\n    --port &lt;YOUR_SERIAL_PORT&gt; \\\n    --baud 921600 \\\n    --before default_reset \\\n    --after hard_reset \\\n    write_flash \\\n      -z \\\n      --flash_mode dio \\\n      --flash_freq 80m \\\n      --flash_size 16MB \\\n      0x0000 bootloader.bin \\\n      0x8000 partitions.bin \\\n      0x10000 firmware.bin\n</code></pre> <pre><code>esptool.py \\\n    --chip esp32s3 \\\n    --port &lt;YOUR_SERIAL_PORT&gt; \\\n    --baud 921600 \\\n    --before default_reset \\\n    --after hard_reset \\\n    write_flash \\\n      -z \\\n      --flash_mode dio \\\n      --flash_freq 80m \\\n      --flash_size 16MB \\\n      0x0000 bootloader.bin \\\n      0xe000 boot_app0.bin \\\n      0x8000 partitions.bin \\\n      0x10000 firmware.bin\n</code></pre> Address Bin File 0x0000 <code>bootloader.bin</code> 0xe000 <code>boot_app0.bin</code> 0x8000 <code>partitions.bin</code> 0x10000 <code>firmware.bin</code> <ul> <li>Reboot the Device:<ul> <li>After the flashing process is complete, unplug the dongle from your computer and plug it back in to reboot it.</li> </ul> </li> </ul> <p>Tip</p> <p>If you have PlatformIO installed, you can use the <code>pio run --target upload</code> command, which handles the flashing process automatically.</p>","tags":["usage"]},{"location":"usage/#synchronizing-files","title":"Synchronizing Files","text":"<p>This guide provides instructions on how to sync files to your device. You can use the automated <code>sync.sh</code> script for a streamlined experience, or follow the manual instructions for more control.</p>","tags":["usage"]},{"location":"usage/#automated-syncing-with-syncsh","title":"Automated Syncing with <code>sync.sh</code>","text":"<p>The <code>scripts/sync.sh</code> script provides an easy way to synchronize a local directory with the device's microSD card over FTP. It uses lftp to mirror the contents, deleting any files on the device that are not present locally.</p>","tags":["usage"]},{"location":"usage/#dependencies","title":"Dependencies","text":"<p>You must have <code>lftp</code> installed on your system.</p> Debian/UbuntumacOS (Homebrew) <pre><code>sudo apt install lftp\n</code></pre> <pre><code>brew install lftp\n</code></pre>","tags":["usage"]},{"location":"usage/#configuration","title":"Configuration","text":"<p>There are two ways to configure the script:</p> <ul> <li>Copy the template <code>.env</code> File (Recommended):</li> </ul> <pre><code>cp scripts/.env.tmpl scripts/.env\n</code></pre> <ul> <li>Edit <code>scripts/.env</code> with your device's IP address and other settings.</li> </ul> <p>scripts/.env</p> <pre><code>FTP_HOST=\"192.168.2.169\"\nFTP_USER=\"user\"\nFTP_PASSWORD=\"password\"\nLOCAL_DIR=\"data\"\nREMOTE_DIR=\"/\" \n</code></pre> <p>Tip</p> <p>You can override the <code>.env</code> file settings by passing environment variables directly.</p>","tags":["usage"]},{"location":"usage/#script-usage","title":"Script Usage","text":"<ol> <li>Make sure the device is in FTP Server Mode.</li> <li>Run the script from the scripts directory:</li> </ol> <p>./scripts directory</p> <pre><code>./sync.sh\n</code></pre> <p>Example with Command-Line Arguments:</p> <p>This command syncs a specific local directory to the device, overriding any settings in <code>.env</code>.</p> <p>./scripts directory</p> <pre><code>FTP_HOST=\"192.168.1.100\" LOCAL_DIR=\"path/to/your/pictures\" ./sync.sh\n</code></pre>","tags":["usage"]},{"location":"usage/#manual-syncing","title":"Manual Syncing","text":"<p>If you don't want to use the <code>sync.sh</code> script, you can manually sync a directory using <code>lftp</code>.</p> <pre><code>lftp -c \"\nset ftp:ssl-allow no;\nopen -u '&lt;FTP_USER&gt;','&lt;FTP_PASSWORD&gt;' '&lt;FTP_HOST&gt;';\nmirror -R --delete --verbose --parallel=1 '&lt;LOCAL_DIR&gt;' '&lt;REMOTE_DIR&gt;';\n\"\n</code></pre>","tags":["usage"]},{"location":"usage/#display","title":"Display","text":"<p>The LCD display uses the TFT_eSPI library to show device status and network information. The content of the display changes depending on the current operating mode.</p> <p>Screens</p> BootUSB Mass Storage ModeFTP Server ModeAP Mode <p>When the device is booting, the device shows:</p> <pre><code>Booting...\n\n version\n</code></pre> <p>When in USB MSC mode, the display shows:</p> <ul> <li>Mode: USB MSC</li> <li>IP: The device's current IP address.</li> <li>MAC: The device's MAC address.</li> <li>Size: The total size of the microSD card.</li> <li>Files: The number of files on the microSD card.</li> <li>Used: The amount of used space on the microSD card.</li> </ul> <p>When in FTP mode, the display shows:</p> <ul> <li>Mode: FTP</li> <li>IP: The device's current IP address.</li> <li>MAC: The device's MAC address.</li> <li>Size: The total size of the microSD card.</li> <li>Files: The number of files on the microSD card.</li> <li>Used: The amount of used space on the microSD card.</li> </ul> <p>When in Wi-Fi Access Point mode for configuration, the display shows:</p> <ul> <li>Mode: AP</li> <li>IP: The AP's IP address (usually <code>192.168.4.1</code>).</li> <li>MAC: The device's MAC address.</li> <li>SSID: The name of the Access Point (<code>AutoConnectAP-FrameFi</code>).</li> </ul>","tags":["usage"]},{"location":"usage/#display-orientation","title":"Display Orientation","text":"<p>You can change the screen orientation by modifying the <code>platformio.ini</code> file.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>DISPLAY_ORIENTATION</code>: Locate the <code>build_flags</code> section and find the <code>-D DISPLAY_ORIENTATION</code> line.</li> <li> <p>Change the Value: Change the value to one of the following:</p> Value Description <code>0</code> Portrait <code>1</code> Landscape (Default) <code>2</code> Portrait Inverted <code>3</code> Landscape Inverted </li> <li> <p>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</p> </li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D DISPLAY_ORIENTATION=1\n</code></pre>","tags":["usage"]},{"location":"usage/#enabledisable-lcd","title":"Enable/Disable LCD","text":"<p>You can completely enable or disable the LCD screen backlight by modifying the <code>platformio.ini</code> file. This is useful for saving power if you don't need the display.</p> <p>Tip</p> <p>The screen can also be enabled and disabled via the web API.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>LCD_ENABLED</code>: Locate the <code>build_flags</code> section and find the <code>-D LCD_ENABLED</code> line.</li> <li> <p>Change the Value:</p> Value Description <code>1</code> Enable the LCD (Default) <code>0</code> Disable the LCD </li> <li> <p>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</p> </li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\nbuild_flags =\n  ...\n  -D LCD_ENABLED=1\n</code></pre>","tags":["usage"]},{"location":"usage/#theme","title":"Theme","text":"<p>You can customize the color scheme of the display by selecting a Catppuccin theme in the <code>platformio.ini</code> file.</p> <ol> <li>Open <code>platformio.ini</code>: Open the <code>platformio.ini</code> file in the root of the project.</li> <li>Find <code>custom_catppuccin_theme</code>: Locate the <code>[env]</code> section and find the <code>custom_catppuccin_theme</code> option.</li> <li>Change the Value: Change the value to one of the following:<ul> <li><code>Mocha</code> (Default)</li> <li><code>Macchiato</code></li> <li><code>Frappe</code></li> <li><code>Latte</code></li> </ul> </li> <li>Rebuild and Upload: Save the file, then rebuild and upload the firmware for the change to take effect.</li> </ol> <p>platformio.ini</p> <pre><code>[env]\n...\ncustom_catppuccin_theme = Mocha\n</code></pre> <p>Note</p> <p>The file <code>catppuccin_colors.h</code> is automatically generated. Do not edit.</p>","tags":["usage"]},{"location":"usage/#references","title":"References","text":"<ul> <li>lftp</li> <li>TFT_eSPI</li> </ul>","tags":["usage"]}]}